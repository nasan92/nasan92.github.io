<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>WorkloadIdentityFederation - Tag - NASAN</title><link>https://nasan92.github.io/tags/workloadidentityfederation/</link><description>WorkloadIdentityFederation - Tag - NASAN</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 26 Sep 2023 06:10:21 +0100</lastBuildDate><atom:link href="https://nasan92.github.io/tags/workloadidentityfederation/" rel="self" type="application/rss+xml"/><item><title>(2/2) How to use terraform from local Machine additionally to Azure DevOps Pipeline (2 Part Series)</title><link>https://nasan92.github.io/posts/2023-09-27-terraform-locally/</link><pubDate>Tue, 26 Sep 2023 06:10:21 +0100</pubDate><author>Author</author><guid>https://nasan92.github.io/posts/2023-09-27-terraform-locally/</guid><description>In the latest blog post (1/2) Setting up Azure workload identity federation with Terraform in Azure DevOps pipelines (2 Part Series) we learned how to setup Azure DevOps using Workload Identiy Federation
Because we are using a managed identity and not a service principal with a secret that has a certain lifetime, we are not directly able to run terraform from locally.
But what about using a service principal for local activities whose secret will expire after a few hours instead of months?</description></item><item><title>(1/2) Setting up Azure workload identity federation with Terraform in Azure DevOps pipelines (2 Part Series)</title><link>https://nasan92.github.io/posts/2023-09-23-azuredevopsterraform/</link><pubDate>Sat, 23 Sep 2023 06:10:21 +0100</pubDate><author>Author</author><guid>https://nasan92.github.io/posts/2023-09-23-azuredevopsterraform/</guid><description><![CDATA[I was curious about how to set up Azure DevOps to utilize Terraform for deploying Azure resources with workload identity federation instead of relying on a service principal with secrets. In this blog post, I will demonstrate how I set up this configuration.
To learn more about workload identity federation read the docs:
Workload identity federation - Microsoft Entra | Microsoft Learn
Prerequisites Azure DevOps Org &ldquo;Customer Azure Tenant&rdquo; with Subscription &ldquo;Backend Azure Tenant&rdquo; with Subscription (can be in the same tenant - in our example we use different tenants) Azure Powershell Module Overview - Setup Steps Create a storage account that will store the Terraform state file Create a managed identity which has contributor permissions on this storage account If not already the case, install the Terraform extension for your Azure DevOps Org Create a new Azure DevOps Project Create a service connection to the &ldquo;backend tenant&rdquo; using workload identity federation with your previously created managed identity Create a managed identity in the customer tenant where you finally want to deploy Azure Resources using Terraform, with Contributor permission on the Subscription Create a service connection to the customer tenant using workload identity federation with your previously created managed identity Create a repository with basic Terraform files Create an Azure DevOps Pipeline Preview Prepare &ldquo;Backend Tenant&rdquo; to store Terraform State File As outlined in this example, I intend to store the Terraform state file in a different Azure Tenant than where the actual Azure Deployment will occur.]]></description></item></channel></rss>